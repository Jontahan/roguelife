# World object, generated by the generator(!), contains all info about the world
# Game objects are defined in this file

# This file should contain rendering and input handling

import numpy as np
import random
import noise


class World:
    A_NOP, A_UP, A_DOWN, A_LEFT, A_RIGHT, A_ATK = range(6)

    def __init__(self, game):
        self.game = game

        self.width, self.height = (15, 15)
        self.spawn_point = (self.width // 2, self.height // 2)
        self.player = Character(self.spawn_point, self)
        self.arrows = []

        self.map_grass = np.zeros((self.width, self.height))
        self.map_tree = np.zeros((self.width, self.height))
        self.map_rock = np.zeros((self.width, self.height))
        self.map_base = np.zeros((self.width, self.height))

    def step(self, action):
        if action == self.game.A_ATK:
            self.arrows.append(Arrow((self.player.x, self.player.y), self.player.facing, self))
        else:
            self.player.move(action)

        for arrow in self.arrows:
            arrow.move()
        self.arrows = list(filter(lambda x: x.active, self.arrows))

        n_enemies = len(self.enemies)
        for enemy_controller in self.enemies:
            enemy_controller.step()
        self.enemies = list(filter(lambda x: x.character.active, self.enemies))
        reward = n_enemies - len(self.enemies)

        if not self.map_base[self.base_x][self.base_y] or not len(self.enemies):
            done = True
        else:
            done = False
        
        return reward, done


    
    def is_pos_free(self, pos):
        for skel in self.enemies:
            if pos[0] == skel.character.x and pos[1] == skel.character.y:
                return False
        if pos[0] == self.player.x and pos[1] == self.player.y:
                return False
        return pos[0] < self.height and pos[0] >= 0 and pos[1] >= 0 and pos[1] < self.width and not self.map_tree[pos[0]][pos[1]] and self.map_rock[pos[0]][pos[1]] != 1 and not self.map_base[pos[0]][pos[1]]


class Character:
    DIR_S, DIR_W, DIR_N, DIR_E = range(4)

    def __init__(self, init_pos, world):
        self.x, self.y = init_pos
        self.facing = self.DIR_S
        self.world = world
        self.active = True

    def move(self, action):
        if action == self.world.game.A_NOP:
            return
        target_pos = (self.x, self.y)

        if action == self.world.game.A_UP:
            if self.facing == self.DIR_N:
                target_pos = (self.x, (self.y - 1))
            else:
                self.facing = self.DIR_N

        if action == self.world.game.A_DOWN:
            if self.facing == self.DIR_S:
                target_pos = (self.x, (self.y + 1))
            else:
                self.facing = self.DIR_S

        if action == self.world.game.A_LEFT:
            if self.facing == self.DIR_W:
                target_pos = ((self.x - 1), self.y)
            else:
                self.facing = self.DIR_W

        if action == self.world.game.A_RIGHT:
            if self.facing == self.DIR_E:
                target_pos = ((self.x + 1), self.y)
            else:
                self.facing = self.DIR_E

        if self.world.is_pos_free(target_pos):
            self.x, self.y = target_pos
            return None
        else:
            return target_pos


class Arrow:
    DIR_S, DIR_W, DIR_N, DIR_E = range(4)

    def __init__(self, init_pos, init_dir, world):
        self.x, self.y = init_pos
        self.facing = init_dir
        self.world = world
        self.active = True

    def move(self):
        if self.facing == Arrow.DIR_S:
            self.y += 1
        if self.facing == Arrow.DIR_W:
            self.x -= 1
        if self.facing == Arrow.DIR_N:
            self.y -= 1
        if self.facing == Arrow.DIR_E:
            self.x += 1

        if self.x not in range(0, self.world.width) or \
           self.y not in range(0, self.world.height) or \
           self.world.map_rock[self.x][self.y] == 1:
            self.active = False
        elif self.world.map_tree[self.x][self.y]:
            self.world.map_tree[self.x][self.y] -= 1
            self.active = False
        
        for enemy_controller in self.world.enemies:
            enemy = enemy_controller.character
            if self.x == enemy.x and self.y == enemy.y:
                enemy.active = False
                self.active = False


"""
    def get_sprite(self):
        if self.facing == Arrow.DIR_S: 
            return pg.transform.rotate(self.world.gman.sprites['arrow'], 180)
        if self.facing == Arrow.DIR_W:
            return pg.transform.rotate(self.world.gman.sprites['arrow'], 90)
        if self.facing == Arrow.DIR_N:
            return self.world.gman.sprites['arrow']
        if self.facing == Arrow.DIR_E:
            return pg.transform.rotate(self.world.gman.sprites['arrow'], 270)
"""
